using System;
using System.Device.Gpio;
using System.Device.Gpio.Drivers;
using System.Device.Spi;
using Iot.Device.Spi;

namespace DisplayServer.Cli;

class Program
{
    // TODO: Rename these
    private const int RST_PIN = 17;
    private const int DC_PIN = 25;
    private const int CS_PIN = 8;
    private const int BUSY_PIN = 24;
    private const int PWR_PIN = 18;
    private const int MOSI_PIN = 10;
    private const int SCLK_PIN = 11;


    static void Main(string[] args)
    {
        using GpioController gpio = AcquireGpio();
        using SpiDevice spi = PowerOnAndAcquireSpi(gpio);

        InitializeDisplay(spi, gpio);

        try
        {
            Console.WriteLine("Press Ctrl+C to exit.");

            while (true)
            {
                Thread.Sleep(1000); // Wait for 1 second
                break;
            }

        }
        finally
        {
            ReleaseGpio(gpio);
        }
    }

    private static void InitializeDisplay(SpiDevice spi, GpioController gpio)
    {
        // self.reset()
        ResetDisplay(gpio);

        // Power Setting
        SendCommand(spi, gpio, 0x01);
        SendData(spi, gpio, 0x37);
        SendData(spi, gpio, 0x00);

        // Panel Setting
        SendCommand(spi, gpio, 0x00);
        SendData(spi, gpio, 0xCF);
        SendData(spi, gpio, 0x08);

        // PLL Control
        SendCommand(spi, gpio, 0x30);
        SendData(spi, gpio, 0x3A); // PLL:  0-15:0x3C, 15+:0x3A

        // VCM_DC_SETTING
        SendCommand(spi, gpio, 0x82);
        SendData(spi, gpio, 0x28); // all temperature  range

        // BOOSTER_SOFT_START
        SendCommand(spi, gpio, 0x06);
        SendData(spi, gpio, 0xc7);
        SendData(spi, gpio, 0xcc);
        SendData(spi, gpio, 0x15);

        // VCOM AND DATA INTERVAL SETTING
        SendCommand(spi, gpio, 0x50);
        SendData(spi, gpio, 0x77);

        // TCON_SETTING
        SendCommand(spi, gpio, 0x60);
        SendData(spi, gpio, 0x22);

        // FLASH CONTROL
        SendCommand(spi, gpio, 0x65);
        SendData(spi, gpio, 0x00);

        // TCON_RESOLUTION
        SendCommand(spi, gpio, 0x61);
        const uint Width = 640;
        const uint Height = 384;
        SendData(spi, gpio, (byte)(Width >> 8));
        SendData(spi, gpio, (byte)(Width & 0xff));
        SendData(spi, gpio, (byte)(Height >> 8));
        SendData(spi, gpio, (byte)(Height & 0xff));

        // FLASH MODE
        SendCommand(spi, gpio, 0xe5);
        SendData(spi, gpio, 0x03);
    }

    private static void SendCommand(SpiDevice spi, GpioController gpio, byte command)
    {
        // epdconfig.digital_write(self.dc_pin, 0)
        // epdconfig.digital_write(self.cs_pin, 0)
        // epdconfig.spi_writebyte([command])
        // epdconfig.digital_write(self.cs_pin, 1)

        gpio.Write(DC_PIN, 0);
        gpio.Write(CS_PIN, 0);
        spi.WriteByte(command);
        gpio.Write(CS_PIN, 1);
    }

    private static void SendData(SpiDevice spi, GpioController gpio, byte data)
    {
        // epdconfig.digital_write(self.dc_pin, 1)
        // epdconfig.digital_write(self.cs_pin, 0)
        // epdconfig.spi_writebyte([data])
        // epdconfig.digital_write(self.cs_pin, 1)

        gpio.Write(DC_PIN, 1);
        gpio.Write(CS_PIN, 0);
        spi.WriteByte(data);
        gpio.Write(CS_PIN, 1);
    }

    private static void ResetDisplay(GpioController controller)
    {
        // epdconfig.digital_write(self.reset_pin, 1)
        // epdconfig.delay_ms(200)
        // epdconfig.digital_write(self.reset_pin, 0)
        // epdconfig.delay_ms(5)
        // epdconfig.digital_write(self.reset_pin, 1)
        // epdconfig.delay_ms(200)

        controller.Write(RST_PIN, 1);
        Thread.Sleep(200);
        controller.Write(RST_PIN, 0);
        Thread.Sleep(5);
        controller.Write(RST_PIN, 1);
        Thread.Sleep(200);
    }

    private static GpioController AcquireGpio()
    {
#pragma warning disable SDGPIO0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
        // var controller = new GpioController(PinNumberingScheme.Logical, new LibGpiodDriver(0, LibGpiodDriverVersion.V1));
        // var controller = new GpioController(PinNumberingScheme.Logical, new LibGpiodDriver(0));
        var controller = new GpioController(PinNumberingScheme.Logical, new OrangePiPCDriver());
#pragma warning restore SDGPIO0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
        // var controller = new GpioController();

        // self.GPIO_RST_PIN = gpiozero.LED(self.RST_PIN)
        // self.GPIO_DC_PIN = gpiozero.LED(self.DC_PIN)
        // # self.GPIO_CS_PIN     = gpiozero.LED(self.CS_PIN)
        // self.GPIO_PWR_PIN = gpiozero.LED(self.PWR_PIN)
        // self.GPIO_BUSY_PIN = gpiozero.Button(self.BUSY_PIN, pull_up = False)

        controller.OpenPin(RST_PIN, PinMode.Output);
        controller.OpenPin(DC_PIN, PinMode.Output);
        // controller.OpenPin(CS_PIN, PinMode.Output);
        controller.OpenPin(PWR_PIN, PinMode.Output);
        controller.OpenPin(BUSY_PIN, PinMode.InputPullDown);

        return controller;
    }

    private static void ReleaseGpio(GpioController controller)
    {
        // self.GPIO_RST_PIN.off()
        // self.GPIO_DC_PIN.off()
        // self.GPIO_PWR_PIN.off()
        // logger.debug("close 5V, Module enters 0 power consumption ...")

        // if cleanup:
        //   self.GPIO_RST_PIN.close()
        //   self.GPIO_DC_PIN.close()
        //   # self.GPIO_CS_PIN.close()
        //   self.GPIO_PWR_PIN.close()
        //   self.GPIO_BUSY_PIN.close()

        controller.Write(RST_PIN, PinValue.Low);
        controller.Write(DC_PIN, PinValue.Low);
        controller.Write(PWR_PIN, PinValue.Low);

        controller.ClosePin(RST_PIN);
        controller.ClosePin(DC_PIN);
        // controller.ClosePin(CS_PIN);
        controller.ClosePin(PWR_PIN);
        controller.ClosePin(BUSY_PIN);
    }

    private static SoftwareSpi PowerOnAndAcquireSpi(GpioController gpio)
    {
        gpio.Write(PWR_PIN, PinValue.High);

        var spi =
            new SoftwareSpi(
                SCLK_PIN,
                -1,
                MOSI_PIN,
                CS_PIN,
                new SpiConnectionSettings(0, -1)
                {
                    ClockFrequency = 4_000_000,
                    Mode = SpiMode.Mode0,
                },
                gpioController: gpio);
        return spi;
    }
}